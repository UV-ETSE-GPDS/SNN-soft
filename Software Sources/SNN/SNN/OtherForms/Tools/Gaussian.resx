<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>